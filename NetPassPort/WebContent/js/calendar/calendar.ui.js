/*
 * File: MyViewport.ui.js Date: Fri Jul 16 2010 12:08:02 GMT+0800 (¥x¥_¼Ð·Ç®É¶¡)
 * 
 * This file was generated by Ext Designer version xds-1.0.2.2.
 * http://www.extjs.com/products/designer/
 * 
 * This file will be auto-generated each and everytime you export.
 * 
 * Do NOT hand edit this file.
 */

var weekday = new Array();
weekday[0] = "<font color='red'>Sunday</font>";
weekday[1] = "Monday";
weekday[2] = "Tuesday";
weekday[3] = "Wednesday";
weekday[4] = "Thursday";
weekday[5] = "Friday";
weekday[6] = "<font color='red'>Saturday</font>";

MyViewportUi = Ext.extend(Ext.Viewport, {
			layout : 'border',
			initComponent : function() {
				this.items = [{
							html : 'top',
							height : 10,
							region : 'north'
						}, {
							layout : 'fit',
							region : 'center',
							items : new CalendarPanel({
										id : 'calendarPanel',
										region : 'center'
									})
						}, {
							html : 'buttom',
							height : 10,
							region : 'south'
						}, {
							height : 10,
							html : 'west',
							region : 'west'
						}, new BidList({
									id : 'BidList',
									width : 350,
									region : 'east'
								})];
				MyViewportUi.superclass.initComponent.call(this);
			}
		});

/**
 * 
 * @class DateLabel
 * @extends Ext.form.Label
 */
DateLabel = Ext.extend(Ext.form.Label, {
			initComponent : function() {
				if (this.showMonth)
					this.text = Ext.util.Format.date(this.date, "M  d");
				else
					this.text = Ext.util.Format.date(this.date, "d");
				var tmpStyle = {};

				if (this.date.getDate() == new Date().getDate()) {
					tmpStyle['fontWeight'] = 'bold';
				}
				if (this.date.getDay() == 0 || this.date.getDay() == 6) {
					tmpStyle['color'] = 'red';
				}
				this.style = tmpStyle;

				DateLabel.superclass.initComponent.call(this);
			}
		});

/**
 * 右側清單
 * 
 * @class BidList
 * @extends Ext.Panel
 */
BidList = Ext.extend(Ext.Panel, {
	title : '-',
	layout : 'border',
	frame : true,
	split : true,
	width : 350,
	initComponent : function() {
		this.items = [{
			xtype : 'grid',
			region : 'center',
			id : 'BidList_unreadList',
			title : '未讀取訊息',
			store : ItemStoreA,
			cm : new Ext.grid.ColumnModel({
						columns : [new Ext.grid.RowNumberer(), {
									id : 'itemIdCell',
									header : 'Item ID',
									width : 100,
									sortable : true,
									dataIndex : 'item_id'
								}, {
									header : 'Msg',
									renderer : function(value, metaData, record) {
										return record.get("msg_unread_count")
												+ "/"
												+ record.get("total_count");
									},
									dataIndex : 'msg_info'
								}]
					})
		}, {
			id : 'BidList_readList',
			autoScroll : true,
			collapsible : true,
			store : ItemStoreB,
			height : 150,
			split : true,
			xtype : 'grid',
			region : 'south',
			title : '已讀取訊息',
			cm : new Ext.grid.ColumnModel({
						columns : [new Ext.grid.RowNumberer(), {
									id : 'itemIdCell',
									header : 'Item ID',
									width : 100,
									sortable : true,
									dataIndex : 'item_id'
								}, {
									header : 'Msg',
									renderer : function(value, metaData, record) {
										return record.get("msg_unread_count")
												+ "/"
												+ record.get("total_count");
									},
									dataIndex : 'msg_info'
								}]
					})
		}];

		BidList.superclass.initComponent.call(this);
		Ext.getCmp('BidList').loadInfo();
	},
	loadInfo : function(date) {
		if (date == null) {
			date = this.date;
		}
		if (date == null) {
			date = new Date();
		}
		this.setTitle(Ext.util.Format.date(date, "Y-m-d"));
		Ext.getCmp('BidList_unreadList').setTitle('未讀取訊息...讀取中');
		Ext.getCmp('BidList_readList').setTitle('已讀取訊息...讀取中');
		this.loadfunction(Ext.util.Format.date(date, "Y-m-d"));
	},
	loadfunction : queryDateInfo
})

/**
 * 日曆元件
 * 
 * @class CalendarPanel
 * @extends Ext.Panel
 */
CalendarPanel = Ext.extend(Ext.Panel, {
	layout : 'table',
	region : 'center',
	baseCls : 'x-plain',
	date : new Date(),
	layoutConfig : {
		columns : 7
	},
	defaults : {
		frame : true,
		height : 100
	},
	setDate : function(date) {
		date = date || new Date();
		date.setMonth(date.getMonth() - 1);

		var tmpDate = new Date();
		tmpDate.setTime(date.valueOf());
		Ext.getCmp('btnLastMonth').date = tmpDate;
		Ext.getCmp('btnLastMonth')
				.setText('<font size=5><font face="webdings" >7</font>'
						+ Ext.util.Format.date(date, "M") + '</font>');

		date.setMonth(date.getMonth() + 2);
		tmpDate = new Date();
		tmpDate.setTime(date.valueOf());
		Ext.getCmp('btnNextMonth').date = tmpDate;
		Ext.getCmp('btnNextMonth').setText('<font size=5>'
				+ Ext.util.Format.date(date, "M")
				+ '<font face="webdings">8</font></font>');
		date.setMonth(date.getMonth() - 1);
		Ext.getCmp('calendarPanelTitle').setText(Ext.util.Format.date(date,
				"Y / m "));

		/***/

		var lastDay = date.getLastDateOfMonth().getDate();
		for (var i = 0; i < 7 * 6; i++) {
			if (i % 7 == 0 & i > lastDay)
				break;
			// 先移除全部內容
			Ext.getCmp('dateCell_' + i).removeAll();
		}

		var tmpDate = new Date();
		tmpDate.setTime(date.valueOf());
		tmpDate.setDate(1);
		var fixDay = tmpDate.getDay();
		var newMonthFlag = true;
		var shadowFlag = true;
		var rightMonth = tmpDate.getMonth();
		var monthMap = {};
		for (var i = 0; i < 7 * 6; i++) {
			if (i % 7 == 0 & i > lastDay)
				break;
			var tmpDate = new Date();
			tmpDate.setTime(date.valueOf());
			tmpDate.setDate(i + 1);
			tmpDate.setDate(tmpDate.getDate() - fixDay);
			var dateCell = Ext.getCmp('dateCell_' + i);

			var idKey = Ext.util.Format.date(tmpDate, "Y_m_d");

			if (Ext.isEmpty(monthMap[tmpDate.getMonth()])) {
				newMonthFlag = true;
				monthMap[tmpDate.getMonth()] = newMonthFlag;
			} else {
				newMonthFlag = false;
			}
			dateCell.date = tmpDate;
			var dateLable = new DateLabel({
						date : tmpDate,
						region : 'north',
						anchor : 'anchor',
						height : 20,
						shadow : (rightMonth == tmpDate.getMilliseconds())
								? false
								: true,
						showMonth : newMonthFlag
					});
			dateLable.render(dateCell.body);
			dateCell.add(dateLable);

			var itemInfoLabel = new Ext.form.Label({
						height : 30,
						anchor: '100%',
						id : 'itemInfoLabel_' + idKey
					});
			var msgInfoLabel = new Ext.form.Label({
						height : 30,
						anchor: '100%',
						id : 'msgInfoLabel_' + idKey
					});

			var box = new Ext.Container({
						region : 'center',
						layout : 'vbox',
						layout: 'table',
						layoutConfig : {
		columns : 1
	},
						items : [itemInfoLabel, msgInfoLabel]
					});
			box.render(dateCell.body);
			dateCell.add(box);
			
			itemInfoLabel.render(box.body);
			msgInfoLabel.render(box.body);
			box.add(itemInfoLabel);
			box.add(msgInfoLabel);
			// box.add(itemInfoLabel);
			// box.add(msgInfoLabel);
			// itemInfoLabel.redner(dateLable.body);
			// dateCell.render(this);
			// dateLable.doLayout();
		}

		initData(Ext.util.Format.date(date, "Y-m"));
	},
	initComponent : function() {
		var today = new Date();
		var lastDay = today.getLastDateOfMonth().getDate();
		var firstDay = today.getFirstDateOfMonth();
		var keyDay = firstDay.getDay();
		var dateCell = new Array();
		today.setMonth(today.getMonth() - 1);
		var lastMonth = {
			date : new Date().setTime(today.valueOf()),
			id : 'btnLastMonth',
			scale : 'large',
			xtype : 'button',
			handler : function() {
				this.ownerCt.setDate(this.date);
			},
			height : 50
		};
		today.setMonth(today.getMonth() + 2);
		var nextMonth = {
			date : new Date().setTime(today.valueOf()),
			id : 'btnNextMonth',
			scale : 'large',
			xtype : 'button',
			handler : function() {
				this.ownerCt.setDate(this.date);
			},
			height : 50
		};
		today.setMonth(today.getMonth() - 1);
		var thisMonth = {
			id : 'calendarPanelTitle',
			xtype : 'label',
			text : Ext.util.Format.date(today, "Y / m "),
			colspan : 5,
			frame : false,
			// width:200,
			height : 30
		};
		dateCell.push(lastMonth);
		dateCell.push(thisMonth);
		dateCell.push(nextMonth);
		for (var i = 0; i < 7; i++) {
			var weekDayName = {
				html : weekday[i],
				height : 30,
				width : 200
			};
			dateCell.push(weekDayName);
		};
		for (var i = 0; i < 7 * 6; i++) {
			if (i % 7 == 0 & i > lastDay) {
				break;
			}
			var idKey = Ext.util.Format.date(tmpDate, "Y_m_d");
			var tmpDate = new Date();
			tmpDate.setDate(i + 1);
			var tmpHtml = Ext.util.Format.date(tmpDate, "d");

			var tmpCell = {
				date : tmpDate,
				xtype : 'panel',
				layout : 'border',
				id : 'dateCell_' + i,
				items : [new DateLabel({
									date : tmpDate,
									region : 'north',
									anchor : 'anchor',
									height : 20
								}), {
							region : 'center',
							layout : 'vbox'
						}],
				listeners : {
					render : function(c) {
						c.el.on('click', function() {
							Ext.getCmp('BidList').loadInfo(c.date);
								// queryDateInfo(c.date);
							});
						c.el.on('mouseover', function() {
							c.el.dom.children[1].children[0].children[0].children[0].children[0].style.background = '#337CE9';
						})
						c.el.on('mouseout', function() {
							c.el.dom.children[1].children[0].children[0].children[0].children[0].style.background = '#DFE8F6';
						})
					}
				}
			}
			dateCell.push(tmpCell);
		}
		this.items = dateCell;
		CalendarPanel.superclass.initComponent.call(this);
	}
});